@model Projet_Finale.Models.Credentials

<!--Référence à wwwroot/css/LoginStyle.css pour aller chercher les règles de css pour la view Login et CreateAcc-->
<link rel="stylesheet" href="~/css/LoginStyle.css" />

<!--Référence pour BootStrap JS et Poopers.js-->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js" integrity="sha384-VeGOWK/CvW1YSj1AA+lxnXG6eCmUaJqMOG3QBiG5jScGzFn5L/7cO+E/YooRSX4" crossorigin="anonymous"></script>


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>FiveM</title>
    <link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Oswald">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Open Sans">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <style>
        h1, h2, h3, h4, h5, h6 {
            font-family: "Oswald"
        }

        body {
            font-family: "Open Sans"
        }

        body {
            margin: 0;
            padding: 0;
            background: url('/images/forest.jpg') center/cover no-repeat; /* Set the background image for the body */
            background-color: #0f1b23c4; /* Fallback background color */
        }

        header {
            background: linear-gradient(to bottom, rgba(24, 75, 109, 0.8), #070d11cb);
            padding: 48px;
            text-align: center;
        }

        .w3-button {
            color: white; /* Set text color for buttons */
        }
    </style>
</head>
<body>

	<!-- w3-content defines a container for fixed-size centered content,
	  and is wrapped around the whole page content, except for the footer in this example -->
	<div>

		<div style="background-color: #0f1b23cb; justify-content: center; display: flex;">
			<div style="max-width: 750px; text-align: center; font-size: large; font-family:'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif; padding-bottom: 5rem;">

				<img src="/images/Logo.PNG" style="padding-top: 2rem;">
				<div class="login-page">
					<div class="login-container">
						<h2>Créer un compte</h2>
						<form id="myForm" asp-action="CreateAcc" method="post">

							<div class="form-group">
								<label asp-for="Username">Username:</label>
								<input asp-for="Username" class="form-control" id="username" />
								<span asp-validation-for="Username" class="text-danger"></span>
							</div>

							<div class="form-group">
								<label asp-for="Password">Password:</label>
								<input asp-for="Password" type="password" class="form-control" id="password" pattern="^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[!#$%^&*()-_+=])[A-Za-z\d!#$%^&*()-_+=]{8,25}$" required>
								<span asp-validation-for="Password" class="text-danger"></span>
							</div>

							<div class="form-group">
								<label asp-for="PasswordValidate">Confirm Password:</label>
								<input asp-for="PasswordValidate" type="password" class="form-control" id="passwordValidate" required>
								<span asp-validation-for="PasswordValidate" class="text-danger"></span>
							</div>

							<div class="form-group">
								<label asp-for="Email">Email:</label>
								<input asp-for="Email" type="email" class="form-control" id="email" />
								<span asp-validation-for="Email" class="text-danger"></span>
							</div>

							<div class="form-group">
								<button type="submit">Créer le compte</button>
							</div>
						</form>
						<div class="form-group">
							<p>Vous avez déjà un compte? <a href="~/Login/Login">Connectez-vous</a>.</p>
						</div>
					</div>
				</div>
				<img src="/images/cliqueDiscord.PNG"> <img src="/images/cliqueFiveM.PNG">
			</div>
		</div>
	</div>
</body>
<script>
    console.log("test1")
    document.getElementById('myForm').addEventListener('submit', function (event) {
        event.preventDefault(); // Empêche le formulaire de se soumettre normalement
        console.log("test submit")

        // Récupère les valeurs des champs du formulaire
        var username = document.getElementById('username').value;
        var password = document.getElementById('password').value;
        var email = document.getElementById('email').value;

        // Crée un objet JSON avec les données du formulaire
        var userData = {
            "username": username,
            "password": password,
            "email": email
        };

        // Envoie les données du formulaire au service REST à la route /insert_user
        fetch('http://127.0.0.1:5000/insert_user', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(userData)
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Erreur lors de la création du compte');
                }
                return response.json();
            })
            .then(data => {
                console.log(data); // Affiche la réponse du serveur dans la console
                // Ajoutez ici le code pour gérer la réponse du serveur (par exemple, afficher un message de succès)
            })
            .catch(error => {
                console.error('Erreur:', error);
                // Ajoutez ici le code pour gérer les erreurs (par exemple, afficher un message d'erreur)
            });
    });
</script>
